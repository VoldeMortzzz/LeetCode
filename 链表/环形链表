#hash表
public class Solution {
    public ListNode detectCycle(ListNode head) {
        HashSet<ListNode> hs = new HashSet<>();
        while(!hs.contains(head)){
            if(head == null) return null;
            hs.add(head);
            head = head.next;
        }
        return head;
    }
}

#双指针
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null||head.next == null) return null;
        ListNode p1 = head,p2 = head.next;
        int len = 1;
        while(p1 != p2){
            p1 = p1.next;
            if(p2.next == null||p2.next.next == null) return null;
            p2 = p2.next.next;
            len++;
        }
        p1 = head;
        p2 = head;
        for(int i = 0;i<len;i++){
            p1 = p1.next;
        }
        while(p1 != p2){
            p1 = p1.next;
            p2 = p2.next;
        }
        return p1;
    }
}
