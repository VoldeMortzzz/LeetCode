#位运算， == 奇数位和-偶数位和 是否3的倍数（该方法仅限于3，其他数字不行）
#复杂度是O(lgn),移位运算比乘除法效率高，故而该方法优于下面的方法

import java.lang.*; 
import java.util.*; 

class GFG { 
	// Function to check if n 
	// is a multiple of 3 
	static int isMultipleOf3(int n) 
	{ 
	    if(n<0) n = -n;
	    if(n == 0) return 1;
	    if(n == 1) return 0;
	    int oddnum = 0,evennum = 0;
	    while(n!=0){
		if((n&1) == 1) oddnum++;
		n = n>>1;
		if((n&1) == 1) evennum++;
		n = n>>1;
	    }
	    return isMultipleOf3(oddnum-evennum);
	} 

	/* Program to test function isMultipleOf3 */
	public static void main(String[] args) 
	{ 
	   	int num = 24; 

		if (isMultipleOf3(num) != 0) 
			System.out.println(num + " is multiple of 3"); 
		else
			System.out.println(num + " is not a multiple of 3"); 
	} 
} 

# == 各10进制位数之和是否为3的倍数（该方法仅限于3，其他数字不行）
import java.lang.*; 
import java.util.*; 

class GFG { 
	// Function to check if n 
	// is a multiple of 3 
	static int isMultipleOf3(int n) 
	{ 
	    if(n < 10){
	      if(n == 3||n == 6||n==9)
		return 1;
	      else
		return 0;
	    }
			int locsum = 0;
	    while(n!=0){
	      locsum += n%10;
		n /= 10; 
	    }
	    return isMultipleOf3(locsum);
	} 

	/* Program to test function isMultipleOf3 */
	public static void main(String[] args) 
	{ 
		int num = 24; 

		if (isMultipleOf3(num) != 0) 
			System.out.println(num + " is multiple of 3"); 
		else
			System.out.println(num + " is not a multiple of 3"); 
	} 
} 
