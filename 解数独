#回溯，利用位运算节省空间、提高运算速度
class Solution {
    int[] rows,cols,blocks;
    public void solveSudoku(char[][] board) {
        rows = new int[9];
        cols = new int[9];
        blocks = new int[9];
        for(int i = 0;i<9;i++){
            for(int j = 0;j<9;j++){
                if(board[i][j] != '.'){
                    rows[i] |= 1<<(board[i][j]-'0');
                    cols[j] |= 1<<(board[i][j]-'0');
                    blocks[3*(i/3)+j/3] |= 1<<(board[i][j]-'0');
                }
            }
        }
        myfunc(board,0,0);
    }
    private boolean myfunc(char[][] board,int row,int col){
        if(col>=9){
            return myfunc(board,row+1,0);
        }
        if(row>=9) return true;
        if(board[row][col] != '.'){
            return myfunc(board,row,col+1);
        }
        for(int i = 1;i<=9;i++){
            if((rows[row]&(1<<i))==0&&(cols[col]&(1<<i))==0&&(blocks[3*(row/3)+col/3]&(1<<i))==0){
                board[row][col] = (char)('0'+i);
                rows[row] |= 1<<i;
                cols[col] |= 1<<i;
                blocks[3*(row/3)+col/3] |= 1<<i;
                if(myfunc(board,row,col+1))
                    return true;
                board[row][col] = '.';
                rows[row] &= ~(1<<i);
                cols[col] &= ~(1<<i);
                blocks[3*(row/3)+col/3] &= ~(1<<i);
            }
        }
        return false;
    }
}
