#快排-递归
class Solution {
    public List<Integer> sortArray(int[] nums) {
        quiksort(nums,0,nums.length-1);
        List<Integer> result = new ArrayList<>();
        for(int i :nums)
            result.add(i);
        return result;
    }
    private void quiksort(int[] nums,int start,int end){
        if(start>=end) return;
        int mid = nums[start];
        int p1 = start+1,p2 = end;
        while(p1<=p2){
            while(p1<=end&&nums[p1]<=mid)
                p1++;
            while(p2>=start+1&&nums[p2]>=mid)
                p2--;
            if(p1>=p2) break;
            int t = nums[p1];
            nums[p1] = nums[p2];
            nums[p2] = t;
        }
        int t = nums[start];
        nums[start] = nums[p2];
        nums[p2] = t;
        quiksort(nums,start,p2-1);
        quiksort(nums,p2+1,end);
    }
}

#快排-非递归
class Solution {
    public List<Integer> sortArray(int[] nums) {
        List<Integer> result = new ArrayList<>();
        if(nums == null||nums.length == 0) return result;
        mysort(nums,0,nums.length-1);
        for(int i:nums)
            result.add(i);
        return result;
    }
    private void mysort(int[] nums,int start,int end){
        Stack<Integer> stack = new Stack<>();
        if(start<end){
            stack.push(start);
            stack.push(end);
            while(!stack.isEmpty()){
                end = stack.pop();
                start = stack.pop();
                int mid = myfunc(nums,start,end);
                if(start<mid-1){
                    stack.push(start);
                    stack.push(mid-1);
                }
                if(end>mid+1){
                    stack.push(mid+1);
                    stack.push(end);
                }
            }
        }
    }
    private int myfunc(int[] nums,int start,int end){
        int mid = nums[start];
        int p1 = start+1,p2 = end;
        while(p1<=p2){
            while(p1<=end&&nums[p1]<=mid)
                p1++;
            while(p2>start&&nums[p2]>=mid)
                p2--;
            if(p1>=p2) break;
            int t = nums[p1];
            nums[p1] = nums[p2];
            nums[p2] = t;
        }
        nums[start] = nums[p2];
        nums[p2] = mid;
        return p2;
    }
}


#归并排序
class Solution {
    public List<Integer> sortArray(int[] nums) {
        mergesort(nums,0,nums.length-1);
        List<Integer> result = new ArrayList<>();
        for(int i:nums)
            result.add(i);
        return result;
    }
    private void mergesort(int[] nums,int start,int end){
        if(start>=end) return;
        int mid = (start+end)/2;
        mergesort(nums,start,mid);
        mergesort(nums,mid+1,end);
        int p1 = start,p2 = mid+1;
        int[] tmp = new int[end-start+1];
        for(int i = 0;i<end-start+1;i++){
            if(p1<=mid && p2<=end){
                if(nums[p1]<nums[p2]){
                    tmp[i] = nums[p1++];
                }else{
                    tmp[i] = nums[p2++];
                }
            }else if(p1>mid){
                tmp[i] = nums[p2++];
            }else{
                tmp[i] = nums[p1++];
            }
        }
        for(int i = 0;i<=end-start;i++)
            nums[start+i] = tmp[i];
    }
}

#堆排序
class Solution {
    public List<Integer> sortArray(int[] nums) {
        for(int i = nums.length/2-1;i>=0;i--)
            dive(nums,i,nums.length-1);
        for(int i = nums.length-1;i>0;i--){
            int t = nums[0];
            nums[0] = nums[i];
            nums[i] = t;
            dive(nums,0,i-1); 
        }
        List<Integer> result = new ArrayList<>();
        for(int i : nums)
            result.add(i);
        return result;
    }
    private void dive(int[] nums,int i,int tail){
        int left = 2*i+1;
        if(left>tail) return;
        int right = 2*i+2;
        int cur;
        if(right>tail)
            cur = left;
        else if(nums[left]>nums[right])
            cur = left;
        else   
            cur = right;
        if(nums[i]>=nums[cur]) return;
        int t = nums[cur];
        nums[cur] = nums[i];
        nums[i] = t;
        dive(nums,cur,tail);
    }
}
